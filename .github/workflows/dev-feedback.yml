name: Dev Feedback

# Fast feedback workflow for development - focuses on speed over completeness
on:
  push:
    branches: [ feature/*, bugfix/*, hotfix/* ]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

concurrency:
  group: dev-feedback-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1

jobs:
  # Ultra-fast checks for immediate feedback
  instant-feedback:
    name: Instant Feedback
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      python-changed: ${{ steps.changes.outputs.python-changed }}
      test-changed: ${{ steps.changes.outputs.test-changed }}
      critical-changed: ${{ steps.changes.outputs.critical-changed }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 2  # Minimal fetch for change detection

    - name: Detect changed files
      id: changes
      run: |
        # Get changed files in last commit
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
        echo "Changed files: $CHANGED_FILES"

        # Check file types
        PYTHON_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.(py|pyi)$' | head -1 || true)
        TEST_CHANGED=$(echo "$CHANGED_FILES" | grep '^tests/' | head -1 || true)
        CRITICAL_CHANGED=$(echo "$CHANGED_FILES" | grep -E '(pyproject\.toml|setup\.|requirements.*\.txt)' | head -1 || true)

        echo "python-changed=$(test -n "$PYTHON_CHANGED" && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "test-changed=$(test -n "$TEST_CHANGED" && echo true || echo false)" >> $GITHUB_OUTPUT
        echo "critical-changed=$(test -n "$CRITICAL_CHANGED" && echo true || echo false)" >> $GITHUB_OUTPUT

    - name: Set up Python (if needed)
      if: steps.changes.outputs.python-changed == 'true'
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install ruff only
      if: steps.changes.outputs.python-changed == 'true'
      run: |
        pip install ruff==0.13.1

    - name: Lightning-fast syntax check
      if: steps.changes.outputs.python-changed == 'true'
      run: |
        # Only check syntax errors and critical issues
        ruff check --select E9,F63,F7,F82 . --output-format=github

    - name: Report instant feedback
      run: |
        echo "🚀 Instant Feedback Results:"
        echo "Python files changed: ${{ steps.changes.outputs.python-changed }}"
        echo "Test files changed: ${{ steps.changes.outputs.test-changed }}"
        echo "Critical files changed: ${{ steps.changes.outputs.critical-changed }}"

  # Fast formatting and basic linting
  quick-lint:
    name: Quick Lint
    needs: instant-feedback
    if: needs.instant-feedback.outputs.python-changed == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Install dev tools
      run: |
        pip install ruff==0.13.1 black==25.1.0

    - name: Check formatting
      run: |
        echo "::group::Black formatting check"
        black --check --diff --quiet xraylabtool/ tests/ || echo "::warning::Code needs formatting"
        echo "::endgroup::"

        echo "::group::Ruff formatting check"
        ruff format --check --diff xraylabtool/ tests/ || echo "::warning::Code needs ruff formatting"
        echo "::endgroup::"

    - name: Fast linting
      run: |
        # Focus on errors and important warnings only
        ruff check xraylabtool/ tests/ \
          --select E,F,W,N,UP,B,A,COM,C4,DTZ,EXE,ISC,ICN,G,PIE,T20,PYI,PT,RET,SIM,ARG,PTH,ERA,PGH,PL,RUF \
          --ignore E501,E203,W503 \
          --output-format=github

  # Smart test selection - only run relevant tests
  smart-tests:
    name: Smart Tests
    needs: [instant-feedback, quick-lint]
    if: always() && needs.instant-feedback.outputs.python-changed == 'true' && (needs.quick-lint.result == 'success' || needs.quick-lint.result == 'skipped')
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 50  # Need more history for test selection

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Install minimal test dependencies
      run: |
        pip install -e .[dev] pytest==8.3.4 pytest-xdist==3.8.0

    - name: Detect changed modules
      id: changed-modules
      run: |
        # Get changed Python files
        CHANGED_PY_FILES=$(git diff --name-only HEAD~1 HEAD | grep '\.py$' | grep -v '^tests/' || true)
        echo "Changed Python files: $CHANGED_PY_FILES"

        # Convert to module paths for test selection
        CHANGED_MODULES=""
        for file in $CHANGED_PY_FILES; do
          if [[ $file =~ ^xraylabtool/ ]]; then
            # Convert file path to module path
            module=$(echo "$file" | sed 's|^xraylabtool/||' | sed 's|\.py$||' | sed 's|/|.|g')
            if [[ -n "$module" && "$module" != "__init__" ]]; then
              CHANGED_MODULES="$CHANGED_MODULES $module"
            fi
          fi
        done

        echo "changed-modules=$CHANGED_MODULES" >> $GITHUB_OUTPUT
        echo "Detected changed modules: $CHANGED_MODULES"

    - name: Run targeted tests
      run: |
        CHANGED_MODULES="${{ steps.changed-modules.outputs.changed-modules }}"

        if [[ -n "$CHANGED_MODULES" ]]; then
          echo "🎯 Running targeted tests for changed modules..."

          # Run tests related to changed modules
          for module in $CHANGED_MODULES; do
            echo "Testing module: $module"
            # Find and run tests for this specific module
            pytest tests/ -k "$module" -v --tb=short --maxfail=3 || true
          done
        fi

        # Always run a minimal smoke test
        echo "🔥 Running smoke tests..."
        pytest tests/ -m "smoke" -v --tb=short --maxfail=1 || \
        pytest tests/unit/ -k "test_basic" --tb=short --maxfail=1 || \
        echo "::warning::No smoke tests found, running first 5 tests"
        pytest tests/ --maxfail=1 --tb=short -x | head -20

    - name: Run affected integration tests
      if: needs.instant-feedback.outputs.critical-changed == 'true'
      run: |
        echo "🔧 Critical files changed, running integration tests..."
        pytest tests/integration/ -v --tb=short --maxfail=2

  # Quick build verification (only if critical files changed)
  quick-build:
    name: Quick Build
    needs: [instant-feedback, smart-tests]
    if: needs.instant-feedback.outputs.critical-changed == 'true' && needs.smart-tests.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install build tools
      run: |
        pip install build==1.2.2

    - name: Quick build test
      run: |
        python -m build --wheel
        echo "✅ Build successful"

  # Summary and next steps
  feedback-summary:
    name: Feedback Summary
    if: always()
    needs: [instant-feedback, quick-lint, smart-tests, quick-build]
    runs-on: ubuntu-latest

    steps:
    - name: Generate feedback summary
      run: |
        echo "## 🚀 Development Feedback Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        echo "### Quick Status Overview" >> $GITHUB_STEP_SUMMARY
        echo "| Check | Status | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|-------|--------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| Instant Feedback | ${{ needs.instant-feedback.result }} | ~1min |" >> $GITHUB_STEP_SUMMARY
        echo "| Quick Lint | ${{ needs.quick-lint.result || 'skipped' }} | ~2min |" >> $GITHUB_STEP_SUMMARY
        echo "| Smart Tests | ${{ needs.smart-tests.result || 'skipped' }} | ~5min |" >> $GITHUB_STEP_SUMMARY
        echo "| Quick Build | ${{ needs.quick-build.result || 'skipped' }} | ~3min |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Determine overall status
        if [[ "${{ needs.instant-feedback.result }}" == "failure" ]]; then
          echo "### ❌ Critical Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "Syntax errors detected. Please fix before proceeding." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Fix syntax errors shown above" >> $GITHUB_STEP_SUMMARY
          echo "2. Run \`ruff check .\` locally" >> $GITHUB_STEP_SUMMARY
          echo "3. Push fixes to trigger re-check" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.quick-lint.result }}" == "failure" ]]; then
          echo "### ⚠️ Code Quality Issues" >> $GITHUB_STEP_SUMMARY
          echo "Linting issues found. Consider fixing for better code quality." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Run \`ruff check --fix .\` and \`black .\` locally" >> $GITHUB_STEP_SUMMARY
          echo "2. Review and commit formatting changes" >> $GITHUB_STEP_SUMMARY
          echo "3. Tests will still run if formatting is the only issue" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.smart-tests.result }}" == "failure" ]]; then
          echo "### ❌ Test Failures" >> $GITHUB_STEP_SUMMARY
          echo "Some tests failed. Please review and fix." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review test failures above" >> $GITHUB_STEP_SUMMARY
          echo "2. Run tests locally: \`pytest tests/ -v\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Fix failing tests and push updates" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ All Checks Passed!" >> $GITHUB_STEP_SUMMARY
          echo "Your changes look good! Ready for full CI when you're ready to merge." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Optional next steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Create PR to trigger full test suite" >> $GITHUB_STEP_SUMMARY
          echo "2. Run \`pre-commit run --all-files\` locally for final check" >> $GITHUB_STEP_SUMMARY
          echo "3. Consider adding tests if you added new functionality" >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on PR with feedback
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const summary = {
            instant: '${{ needs.instant-feedback.result }}',
            lint: '${{ needs.quick-lint.result || 'skipped' }}',
            tests: '${{ needs.smart-tests.result || 'skipped' }}',
            build: '${{ needs.quick-build.result || 'skipped' }}'
          };

          const getIcon = (status) => {
            switch(status) {
              case 'success': return '✅';
              case 'failure': return '❌';
              case 'skipped': return '⏭️';
              default: return '⏳';
            }
          };

          const overallStatus = summary.instant === 'success' &&
                               (summary.lint === 'success' || summary.lint === 'skipped') &&
                               (summary.tests === 'success' || summary.tests === 'skipped');

          const comment = `## 🚀 Development Feedback (Fast Check)

          ${overallStatus ? '🟢 **LOOKING GOOD!**' : '🔴 **NEEDS ATTENTION**'}

          | Check | Status | Notes |
          |-------|--------|-------|
          | ${getIcon(summary.instant)} Syntax | ${summary.instant} | Critical errors check |
          | ${getIcon(summary.lint)} Format | ${summary.lint} | Code style & linting |
          | ${getIcon(summary.tests)} Tests | ${summary.tests} | Smart test selection |
          | ${getIcon(summary.build)} Build | ${summary.build} | Package integrity |

          ${overallStatus ?
            '🎉 Your changes passed the fast checks! Full CI will run when you merge to main/develop.' :
            '⚠️ Please review the issues above. Most can be auto-fixed with `ruff check --fix .` and `black .`'
          }

          *This is a fast development feedback check. Full test suite runs on main/develop branches.*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });