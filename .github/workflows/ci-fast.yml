name: Fast CI/CD Pipeline (Optimized)

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
      - '.github/workflows/**'  # Don't trigger on workflow changes
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  workflow_dispatch:  # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHONUNBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1
  PIP_DISABLE_PIP_VERSION_CHECK: 1
  PIP_NO_PYTHON_VERSION_WARNING: 1
  PIP_PREFER_BINARY: 1

  # Performance optimizations
  OMP_NUM_THREADS: 2
  MKL_NUM_THREADS: 2
  OPENBLAS_NUM_THREADS: 2

  # Latest stable tool versions for 2025
  RUFF_VERSION: "0.13.1"
  BLACK_VERSION: "25.1.0"
  ISORT_VERSION: "6.0.1"
  MYPY_VERSION: "1.18.1"
  PYTEST_VERSION: "8.3.4"

jobs:
  # Ultra-fast initial checks - provides feedback in <60 seconds
  quick-checks:
    name: ‚ö° Quick Checks
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      should-run-full: ${{ steps.changes.outputs.should-run-full }}
      python-files-changed: ${{ steps.changes.outputs.python-files }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Detect file changes
      id: changes
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
        fi

        if [[ "$BASE_SHA" == "0000000000000000000000000000000000000000" ]] || ! git cat-file -e "$BASE_SHA" 2>/dev/null; then
          echo "Initial commit, running full checks"
          echo "should-run-full=true" >> $GITHUB_OUTPUT
          echo "python-files=true" >> $GITHUB_OUTPUT
          exit 0
        fi

        CHANGED_FILES=$(git diff --name-only "$BASE_SHA"..."${{ github.sha }}")
        PYTHON_CHANGED=$(echo "$CHANGED_FILES" | grep -E '\.(py|pyi)$' || true)
        CRITICAL_CHANGED=$(echo "$CHANGED_FILES" | grep -E '(pyproject\.toml|setup\.|requirements.*\.txt|\.github/workflows/|conftest\.py)' || true)

        if [[ -n "$PYTHON_CHANGED" ]] || [[ -n "$CRITICAL_CHANGED" ]]; then
          echo "should-run-full=true" >> $GITHUB_OUTPUT
          echo "python-files=true" >> $GITHUB_OUTPUT
        else
          echo "should-run-full=false" >> $GITHUB_OUTPUT
          echo "python-files=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Python 3.12
      if: steps.changes.outputs.python-files == 'true'
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'

    - name: Install ruff (minimal deps)
      if: steps.changes.outputs.python-files == 'true'
      run: |
        python -m pip install --upgrade pip
        pip install ruff==${{ env.RUFF_VERSION }}

    - name: Fast syntax check
      if: steps.changes.outputs.python-files == 'true'
      run: |
        ruff check --select E9,F63,F7,F82 xraylabtool/ tests/ --output-format=github
        echo "‚úÖ Basic syntax check passed"

  # Fast linting with smart caching - runs in ~2-3 minutes
  lint:
    name: üîç Code Quality
    needs: quick-checks
    if: needs.quick-checks.outputs.should-run-full == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 8

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Cache linting tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: lint-tools-v3-${{ runner.os }}-${{ env.RUFF_VERSION }}-${{ env.BLACK_VERSION }}-${{ env.MYPY_VERSION }}
        restore-keys: |
          lint-tools-v3-${{ runner.os }}-

    - name: Install linting tools (parallel)
      run: |
        python -m pip install --upgrade pip
        pip install --no-deps \
          ruff==${{ env.RUFF_VERSION }} \
          black==${{ env.BLACK_VERSION }} \
          isort==${{ env.ISORT_VERSION }} \
          mypy==${{ env.MYPY_VERSION }}

    - name: Run ruff (fast linting + formatting)
      run: |
        echo "::group::Ruff Format Check"
        ruff format --check --diff xraylabtool/ tests/ || (echo "‚ùå Formatting issues found" && exit 1)
        echo "::endgroup::"

        echo "::group::Ruff Lint"
        ruff check xraylabtool/ tests/ --output-format=github
        echo "::endgroup::"

    - name: Run import sorting check
      run: |
        isort --check-only --diff xraylabtool/ tests/

    - name: Run type checking
      run: |
        mypy xraylabtool/ --show-error-codes --no-error-summary

    - name: Security scan (non-blocking)
      run: |
        pip install bandit[toml]==1.8.6
        bandit -r xraylabtool/ --skip B101,B603,B110,B324 -q || echo "‚ö†Ô∏è Security warnings found (non-blocking)"
      continue-on-error: true

  # Smart test execution with fast feedback
  test:
    name: üß™ Tests
    needs: [quick-checks, lint]
    if: always() && needs.quick-checks.outputs.should-run-full == 'true' && (needs.lint.result == 'success' || needs.lint.result == 'skipped')
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    strategy:
      fail-fast: true  # Fast failure for immediate feedback
      matrix:
        os: [ubuntu-latest]  # Start with Ubuntu only for speed
        python-version: ['3.12']  # Primary version first
        include:
          # Add other combinations only if needed
          - os: macos-latest
            python-version: '3.12'
          - os: ubuntu-latest
            python-version: '3.11'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Cache test dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: test-deps-v3-${{ runner.os }}-py${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          test-deps-v3-${{ runner.os }}-py${{ matrix.python-version }}-

    - name: Install dependencies (optimized)
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev] pytest==${{ env.PYTEST_VERSION }} pytest-xdist

    - name: Run core tests (fast execution)
      run: |
        # Use optimal number of workers for CI
        WORKERS=$(python -c "import os; print(min(4, max(1, os.cpu_count() or 1)))")
        echo "Running tests with $WORKERS workers"

        # Run unit tests first (fastest feedback)
        pytest tests/unit/ \
          -v \
          -x \
          --tb=short \
          --maxfail=3 \
          -n $WORKERS \
          --junit-xml=junit-unit.xml

        # Run integration tests if unit tests pass
        pytest tests/integration/ \
          -v \
          -x \
          --tb=short \
          --maxfail=2 \
          -n $WORKERS \
          --junit-xml=junit-integration.xml

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: junit-*.xml
        retention-days: 7

  # Fast build verification
  build:
    name: üì¶ Build
    needs: [lint, test]
    if: always() && needs.lint.result == 'success' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 1

    - name: Set up Python 3.12
      uses: actions/setup-python@v6
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: Cache build tools
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: build-tools-v3-${{ runner.os }}
        restore-keys: |
          build-tools-v3-${{ runner.os }}-

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build==1.2.2 twine==6.0.1

    - name: Build package
      run: |
        python -m build

    - name: Verify package
      run: |
        python -m twine check dist/*
        pip install dist/*.whl
        python -c "import xraylabtool; print(f'‚úÖ Package installed successfully: {xraylabtool.__version__}')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/
        retention-days: 30

  # Status check with enhanced reporting
  status:
    name: üìä Status
    if: always()
    needs: [quick-checks, lint, test, build]
    runs-on: ubuntu-latest
    timeout-minutes: 2

    steps:
    - name: Report results
      run: |
        echo "üöÄ Fast CI/CD Pipeline Results"
        echo "============================="
        echo "Quick Checks: ${{ needs.quick-checks.result }}"
        echo "Code Quality: ${{ needs.lint.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo ""

        # Determine overall status
        if [[ "${{ needs.quick-checks.result }}" == "failure" ]]; then
          echo "‚ùå Quick checks failed - syntax errors detected"
          exit 1
        elif [[ "${{ needs.lint.result }}" == "failure" ]]; then
          echo "‚ùå Code quality checks failed"
          exit 1
        elif [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "‚ùå Tests failed"
          exit 1
        elif [[ "${{ needs.build.result }}" == "failure" ]]; then
          echo "‚ùå Build failed"
          exit 1
        else
          echo "‚úÖ All checks passed! Ready for merge."
          echo "‚ö° Total pipeline time: ~8-12 minutes"
        fi
