{
  "timestamp": "2025-09-19 19:48:25",
  "analysis_duration": 0.7158725830086041,
  "function_bottlenecks": [
    {
      "function_name": "calculate_single_material_properties",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 1478,
      "total_time": 0.000557836,
      "cumulative_time": 0.031966584,
      "call_count": 9,
      "time_per_call": 6.198177777777779e-05,
      "percentage_of_total": 81.53492835488503,
      "is_builtin": false
    },
    {
      "function_name": "_calculate_single_material_xray_properties",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 1268,
      "total_time": 0.000886329,
      "cumulative_time": 0.031198749,
      "call_count": 9,
      "time_per_call": 9.848100000000001e-05,
      "percentage_of_total": 79.57646536386376,
      "is_builtin": false
    },
    {
      "function_name": "_prepare_element_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 1254,
      "total_time": 0.004683952,
      "cumulative_time": 0.023527043,
      "call_count": 9,
      "time_per_call": 0.0005204391111111111,
      "percentage_of_total": 60.00878183941391,
      "is_builtin": false
    },
    {
      "function_name": "create_scattering_factor_interpolators",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 1094,
      "total_time": 0.001355918,
      "cumulative_time": 0.017352333,
      "call_count": 3,
      "time_per_call": 0.00045197266666666667,
      "percentage_of_total": 44.25938123213626,
      "is_builtin": false
    },
    {
      "function_name": "load_scattering_factor_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 513,
      "total_time": 0.011379918000000001,
      "cumulative_time": 0.010659084000000001,
      "call_count": 3,
      "time_per_call": 0.003793306,
      "percentage_of_total": 27.187379491931367,
      "is_builtin": false
    },
    {
      "function_name": "__init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/scipy/interpolate/_cubic.py",
      "line_number": 239,
      "total_time": 0.00013733200000000002,
      "cumulative_time": 0.004356459,
      "call_count": 6,
      "time_per_call": 2.288866666666667e-05,
      "percentage_of_total": 11.111715047375538,
      "is_builtin": false
    },
    {
      "function_name": "wrapper",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/psutil/_common.py",
      "line_number": 452,
      "total_time": 0.001339997,
      "cumulative_time": 0.0037447020000000004,
      "call_count": 46,
      "time_per_call": 2.9130369565217395e-05,
      "percentage_of_total": 9.551349286504768,
      "is_builtin": false
    },
    {
      "function_name": "memory_info",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/psutil/__init__.py",
      "line_number": 1113,
      "total_time": 0.000193999,
      "cumulative_time": 0.003082,
      "call_count": 46,
      "time_per_call": 4.217369565217392e-06,
      "percentage_of_total": 7.861041679954157,
      "is_builtin": false
    },
    {
      "function_name": "wrapper",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/psutil/_psosx.py",
      "line_number": 343,
      "total_time": 0.00048395500000000005,
      "cumulative_time": 0.0028880010000000003,
      "call_count": 46,
      "time_per_call": 1.0520760869565218e-05,
      "percentage_of_total": 7.366222009328127,
      "is_builtin": false
    },
    {
      "function_name": "memory_info",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/psutil/_psosx.py",
      "line_number": 445,
      "total_time": 0.000354091,
      "cumulative_time": 0.0026264210000000003,
      "call_count": 46,
      "time_per_call": 7.69763043478261e-06,
      "percentage_of_total": 6.699028212234549,
      "is_builtin": false
    },
    {
      "function_name": "prepare_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/scipy/interpolate/_cubic.py",
      "line_number": 16,
      "total_time": 0.0006234190000000001,
      "cumulative_time": 0.002262543,
      "call_count": 12,
      "time_per_call": 5.1951583333333336e-05,
      "percentage_of_total": 5.77091006673865,
      "is_builtin": false
    },
    {
      "function_name": "calculate_scattering_factors",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 881,
      "total_time": 0.000735368,
      "cumulative_time": 0.002151458,
      "call_count": 9,
      "time_per_call": 8.170755555555556e-05,
      "percentage_of_total": 5.487573332469439,
      "is_builtin": false
    },
    {
      "function_name": "__init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/scipy/interpolate/_cubic.py",
      "line_number": 140,
      "total_time": 0.00024041900000000002,
      "cumulative_time": 0.002109583,
      "call_count": 6,
      "time_per_call": 4.0069833333333334e-05,
      "percentage_of_total": 5.380765700948323,
      "is_builtin": false
    },
    {
      "function_name": "<method 'append' of 'list' objects>",
      "file_path": "~",
      "line_number": 0,
      "total_time": 0.001259844,
      "cumulative_time": 0.001259844,
      "call_count": 1380,
      "time_per_call": 9.129304347826087e-07,
      "percentage_of_total": 3.213395909876757,
      "is_builtin": false
    },
    {
      "function_name": "_get_pidtaskinfo",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/psutil/_psosx.py",
      "line_number": 376,
      "total_time": 0.00013695500000000002,
      "cumulative_time": 0.001258746,
      "call_count": 46,
      "time_per_call": 2.9772826086956528e-06,
      "percentage_of_total": 3.2105953181296485,
      "is_builtin": false
    },
    {
      "function_name": "calculate_derived_quantities",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_number": 1001,
      "total_time": 0.000721617,
      "cumulative_time": 0.001227584,
      "call_count": 9,
      "time_per_call": 8.017966666666667e-05,
      "percentage_of_total": 3.1311125858678923,
      "is_builtin": false
    },
    {
      "function_name": "__call__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/scipy/interpolate/_interpolate.py",
      "line_number": 762,
      "total_time": 0.000420579,
      "cumulative_time": 0.00122642,
      "call_count": 30,
      "time_per_call": 1.4019300000000001e-05,
      "percentage_of_total": 3.1281436525403556,
      "is_builtin": false
    },
    {
      "function_name": "_find_derivatives",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/venv/lib/python3.13/site-packages/scipy/interpolate/_cubic.py",
      "line_number": 266,
      "total_time": 0.000597291,
      "cumulative_time": 0.001122958,
      "call_count": 6,
      "time_per_call": 9.95485e-05,
      "percentage_of_total": 2.8642503708105,
      "is_builtin": false
    },
    {
      "function_name": "<built-in method psutil._psutil_osx.proc_pidtaskinfo_oneshot>",
      "file_path": "~",
      "line_number": 0,
      "total_time": 0.0011020000000000001,
      "cumulative_time": 0.0011020000000000001,
      "call_count": 46,
      "time_per_call": 2.3956521739130437e-05,
      "percentage_of_total": 2.8107942671348094,
      "is_builtin": false
    },
    {
      "function_name": "<built-in method numpy.array>",
      "file_path": "~",
      "line_number": 0,
      "total_time": 0.0010727500000000001,
      "cumulative_time": 0.0010727500000000001,
      "call_count": 12,
      "time_per_call": 8.939583333333335e-05,
      "percentage_of_total": 2.7361883394454325,
      "is_builtin": false
    }
  ],
  "line_bottlenecks": [],
  "memory_bottlenecks": [],
  "vectorization_opportunities": [
    {
      "function_name": "bragg_angle",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        219,
        219
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "theta_rad = np.arcsin(sin_theta)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "bragg_angle",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        220,
        220
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "theta_deg = np.degrees(theta_rad)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "d_spacing_cubic",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        236,
        236
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return float(a / np.sqrt(h**2 + k**2 + miller_l**2))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "d_spacing_tetragonal",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        253,
        253
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return float(1 / np.sqrt((h**2 + k**2) / a**2 + miller_l**2 / c**2))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "d_spacing_orthorhombic",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        269,
        269
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return float(1 / np.sqrt(h**2 / a**2 + k**2 / b**2 + miller_l**2 / c**2))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "q_from_angle",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        283,
        283
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "theta_rad = np.radians(two_theta / 2)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "q_from_angle",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        284,
        284
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "q = (4 * np.pi * np.sin(theta_rad)) / wavelength",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "angle_from_q",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        304,
        304
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "theta_rad = np.arcsin(sin_theta)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "angle_from_q",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        305,
        305
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "two_theta_deg = 2 * np.degrees(theta_rad)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "smooth_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        329,
        329
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y_arr = np.asarray(y)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "smooth_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        332,
        332
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.full(len(y_arr), np.mean(y_arr), dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "smooth_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        335,
        335
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "kernel = np.ones(window_size, dtype=np.float64) / window_size",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "smooth_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        339,
        339
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "padded_y = np.pad(y_arr, half_window, mode=\"edge\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "smooth_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        340,
        340
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "convolved = np.convolve(padded_y, kernel, mode=\"valid\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "find_peaks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        364,
        364
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "x_arr = np.asarray(x)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "find_peaks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        365,
        365
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y_arr = np.asarray(y)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        392,
        392
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "x_arr = np.asarray(x)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        393,
        393
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y_arr = np.asarray(y)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        397,
        397
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "background = np.linspace(y_arr[0], y_arr[-1], len(y_arr))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        401,
        401
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "min_idx = np.argmin(y_arr)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        402,
        402
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "x_points = np.array([x_arr[0], x_arr[min_idx], x_arr[-1]])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        403,
        403
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y_points = np.array([y_arr[0], y_arr[min_idx], y_arr[-1]])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        404,
        404
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "coeffs = np.polyfit(x_points, y_points, 2)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "background_subtraction",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        405,
        405
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "background = np.polyval(coeffs, x_arr)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "normalize_intensity",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        424,
        424
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y_arr = np.asarray(y)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "normalize_intensity",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        427,
        427
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return y_arr / float(np.max(y_arr))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "normalize_intensity",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        429,
        429
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return y_arr / float(np.trapezoid(y_arr))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "normalize_intensity",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        431,
        431
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return (y_arr - float(np.mean(y_arr))) / float(np.std(y_arr))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "save_processed_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        471,
        471
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data = np.column_stack((x, y))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "save_processed_data",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/utils.py",
      "line_range": [
        472,
        472
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.savetxt(filename, data, header=header, fmt=\"%.6f\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        36,
        36
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "ComplexArray = NDArray[np.complex128]  # Complex scattering factors (f1 + if2)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        40,
        40
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "OpticalConstantArray = NDArray[np.float64]  # Dispersion (\u03b4) and absorption (\u03b2)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "validate_energy_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        244,
        244
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return not (np.any(energies < 0.03) or np.any(energies > 30.0))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "ensure_float64_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        285,
        285
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.asarray(array, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "ensure_complex128_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        304,
        304
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.asarray(array, dtype=np.complex128)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "is_real_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        326,
        326
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return isinstance(obj, np.ndarray) and np.issubdtype(obj.dtype, np.floating)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "optimize_array_memory_layout",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/typing_extensions.py",
      "line_range": [
        352,
        352
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.ascontiguousarray(array)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        104,
        104
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"mean\": float(np.mean(all_values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        105,
        105
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"std\": float(np.std(all_values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        106,
        106
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"min\": float(np.min(all_values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        107,
        107
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"max\": float(np.max(all_values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        108,
        108
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"range\": float(np.max(all_values) - np.min(all_values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_generate_recommendations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/comparator.py",
      "line_range": [
        255,
        255
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "prop_stats[\"std\"] / prop_stats[\"mean\"] > 0.5",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "find_absorption_edges",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        58,
        58
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "derivative = np.gradient(f2_values, energies)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "find_absorption_edges",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        62,
        71
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for i in range(1, len(derivative) - 1):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 22
    },
    {
      "function_name": "compare_materials",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        101,
        101
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "values = np.array(values)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "compare_materials",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        103,
        103
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"mean\": float(np.mean(values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "compare_materials",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        104,
        104
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"std\": float(np.std(values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "compare_materials",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        105,
        105
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"min\": float(np.min(values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "compare_materials",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/analysis/__init__.py",
      "line_range": [
        106,
        106
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"max\": float(np.max(values)),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/adaptive_preloading.py",
      "line_range": [
        171,
        180
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in sequence_elements:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 12
    },
    {
      "function_name": "get_adaptive_preload_recommendations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/adaptive_preloading.py",
      "line_range": [
        266,
        275
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in current_elements:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 18
    },
    {
      "function_name": "_update_performance_windows",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/hit_rate_monitor.py",
      "line_range": [
        179,
        179
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "sum(w[\"hit_rate\"] * w[\"samples\"] for w in hour_windows)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_calculate_performance_trend",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/hit_rate_monitor.py",
      "line_range": [
        300,
        309
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "recent_hit_rates = [w[\"hit_rate\"] for w in windows[-3:]]  # Last 30 minutes",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 23
    },
    {
      "function_name": "_calculate_performance_trend",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/hit_rate_monitor.py",
      "line_range": [
        301,
        310
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "earlier_hit_rates = [w[\"hit_rate\"] for w in windows[-6:-3]]  # 30-60 minutes ago",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 16
    },
    {
      "function_name": "get_bulk_atomic_data_fast",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/atomic_cache.py",
      "line_range": [
        208,
        217
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in elements_tuple:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 9
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/atomic_cache.py",
      "line_range": [
        334,
        343
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in elements_to_warm:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 6
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/atomic_cache.py",
      "line_range": [
        370,
        379
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for combo in common_combos:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 7
    },
    {
      "function_name": "get_scattering_factors",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/atomic_cache.py",
      "line_range": [
        514,
        514
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_arr = np.asarray(energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "get_scattering_factors",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/atomic_cache.py",
      "line_range": [
        529,
        529
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.asarray(complex_factors, dtype=np.complex128)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "chunk_iterator",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        126,
        135
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for i in range(0, len(data), chunk_size):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 11
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        221,
        221
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.isscalar(energies):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        224,
        224
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array([float(energies.real)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        226,
        226
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array([float(energies)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        228,
        228
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array(energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        230,
        230
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies_array <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_prepare_energies_array",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        232,
        232
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies_array < 0.03) or np.any(energies_array > 30):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_process_chunks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        262,
        271
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for chunk in chunk_iterator(calculation_data, config.chunk_size):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 13
    },
    {
      "function_name": "calculate_batch_properties",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        313,
        313
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": ">>> energies = np.linspace(5, 15, 101)  # 101 energy points",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        509,
        509
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies.append(np.array(energy_list))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/batch_processing.py",
      "line_range": [
        511,
        511
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies = [np.array([float(e)]) for e in energy_data]",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "parse_chemical_formula",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        154,
        163
      ],
      "loop_type": "while_loop",
      "estimated_benefit": "low",
      "current_pattern": "while \"(\" in formula:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 9
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        193,
        193
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "formula = formula[:start] + expanded + formula[end + 1 :]",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "get_recommended_elements_for_warming",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        373,
        382
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for compound in recent_compounds:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 12
    },
    {
      "function_name": "get_recommended_elements_for_warming",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        380,
        389
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in elements:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 17
    },
    {
      "function_name": "get_recommended_elements_for_warming",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        385,
        394
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for element in common_elements:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 17
    },
    {
      "function_name": "analyze_element_associations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/data_handling/compound_analysis.py",
      "line_range": [
        425,
        434
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "element_associations[element] = [assoc[0] for assoc in sorted_associations[:5]]",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 13
    },
    {
      "function_name": "wrapper",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        41,
        50
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for arg in args:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 11
    },
    {
      "function_name": "wrapper",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        43,
        43
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "new_args.append(np.ascontiguousarray(arg))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        74,
        74
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.zeros(n_energies, dtype=np.float64), np.zeros(",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        80,
        80
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.zeros(n_energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        81,
        81
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.zeros(n_energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        91,
        91
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_values = np.asarray(f1_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        93,
        93
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_values = np.asarray(f2_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        103,
        103
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_matrix = np.empty((n_elements, n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        104,
        104
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_matrix = np.empty((n_elements, n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        113,
        113
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.einsum(\"i,ij->j\", element_counts, f1_matrix)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        114,
        114
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.einsum(\"i,ij->j\", element_counts, f2_matrix)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_multi_material_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        150,
        150
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.square(wavelength)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "vectorized_multi_material_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        152,
        152
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.ascontiguousarray(wave_sq)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_process_single_element_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        201,
        201
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_batch = np.empty((len(materials), n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_process_single_element_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        202,
        202
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_batch = np.empty((len(materials), n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_process_single_element_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        225,
        225
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.ascontiguousarray(f1_values, dtype=np.float64),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_process_single_element_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        226,
        226
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.ascontiguousarray(f2_values, dtype=np.float64),",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_scattering_factors_vectorized",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        322,
        322
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "dispersion = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_scattering_factors_vectorized",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        323,
        323
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "absorption = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_scattering_factors_vectorized",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        324,
        324
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_scattering_factors_vectorized",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        325,
        325
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        333,
        333
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.square(wavelength)  # More efficient than wavelength ** 2",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        337,
        337
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.ascontiguousarray(wave_sq)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        347,
        347
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_values = np.ascontiguousarray(f1_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        348,
        348
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_values = np.ascontiguousarray(f2_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "benchmark_vectorization_improvement",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        416,
        425
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for _ in range(iterations):",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 14
    },
    {
      "function_name": "benchmark_vectorization_improvement",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        425,
        434
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for _ in range(iterations):",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 11
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        433,
        433
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "original_median = np.median(original_times)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        434,
        434
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "vectorized_median = np.median(vectorized_times)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        443,
        443
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if isinstance(orig, np.ndarray) and isinstance(vect, np.ndarray):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        444,
        444
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "relative_error = np.max(np.abs((orig - vect) / (orig + 1e-15)))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "create_simd_optimized_arrays",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        479,
        479
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.prod(shape) * np.dtype(dtype).itemsize",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "create_simd_optimized_arrays",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        483,
        483
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "array = np.empty(shape, dtype=dtype, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "create_simd_optimized_arrays",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        487,
        487
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "array = np.ascontiguousarray(array)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_optimized_element_sum",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        511,
        511
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_matrix = np.ascontiguousarray(f1_matrix)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_optimized_element_sum",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        513,
        513
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_matrix = np.ascontiguousarray(f2_matrix)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_optimized_element_sum",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        515,
        515
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "element_counts = np.ascontiguousarray(element_counts)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_optimized_element_sum",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        519,
        519
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.einsum(\"i,ij->j\", element_counts, f1_matrix, optimize=True)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_optimized_element_sum",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        520,
        520
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.einsum(\"i,ij->j\", element_counts, f2_matrix, optimize=True)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_vectorized_wavelength_operations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        540,
        540
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wavelength = np.ascontiguousarray(wavelength)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_vectorized_wavelength_operations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        544,
        544
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.square(wavelength)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "simd_vectorized_wavelength_operations",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        551,
        551
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_factor = np.ascontiguousarray(wave_factor)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "adaptive_simd_interpolation_batch",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        579,
        579
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.zeros(n_energies, dtype=np.float64), np.zeros(",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        606,
        606
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.zeros(n_energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        607,
        607
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.zeros(n_energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        616,
        616
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_values = np.asarray(f1_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/vectorized_core.py",
      "line_range": [
        618,
        618
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_values = np.asarray(f2_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_estimate_numpy_memory",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        144,
        153
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for obj in gc.get_objects():",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 11
    },
    {
      "function_name": "memory_monitor",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        214,
        223
      ],
      "loop_type": "while_loop",
      "estimated_benefit": "low",
      "current_pattern": "while True:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 10
    },
    {
      "function_name": "_count_numpy_arrays",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        259,
        268
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for obj in gc.get_objects():",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 9
    },
    {
      "function_name": "analyze_memory_leaks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        286,
        295
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for profile in self.profiles:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 5
    },
    {
      "function_name": "get_memory_efficiency_report",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        387,
        387
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.mean(allocation_rates) if allocation_rates else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "get_memory_efficiency_report",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        390,
        390
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.max(allocation_rates) if allocation_rates else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        393,
        393
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.std(allocation_rates) if allocation_rates else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        398,
        398
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.mean(peak_memory_usage) if peak_memory_usage else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        401,
        401
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.max(peak_memory_usage) if peak_memory_usage else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        404,
        404
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.std(peak_memory_usage) if peak_memory_usage else 0",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        408,
        408
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"average_numpy_ratio\": np.mean(numpy_ratios) if numpy_ratios else 0,",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/memory_profiler.py",
      "line_range": [
        410,
        410
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "\"numpy_ratio_std\": np.std(numpy_ratios) if numpy_ratios else 0,",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_analyze_file_for_vectorization",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/bottleneck_analyzer.py",
      "line_range": [
        544,
        553
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for l in context_lines[1:6]",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 13
    },
    {
      "function_name": "_extract_function_name",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/bottleneck_analyzer.py",
      "line_range": [
        582,
        591
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for i in range(line_index, max(0, line_index - 50), -1):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 17
    },
    {
      "function_name": "_calculate_complexity_score",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/bottleneck_analyzer.py",
      "line_range": [
        595,
        604
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for line in context_lines:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 17
    },
    {
      "function_name": "_calculate_complexity_score",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/bottleneck_analyzer.py",
      "line_range": [
        609,
        618
      ],
      "loop_type": "while_loop",
      "estimated_benefit": "low",
      "current_pattern": "if \"for \" in stripped or \"while \" in stripped:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 13
    },
    {
      "function_name": "_suggest_vectorization",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/bottleneck_analyzer.py",
      "line_range": [
        619,
        628
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "elif \"for \" in line and any(\"*\" in l or \"+\" in l for l in context):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 20
    },
    {
      "function_name": "get_trend_analysis",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/regression_detector.py",
      "line_range": [
        250,
        250
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "x = np.array(timestamps)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "get_trend_analysis",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/regression_detector.py",
      "line_range": [
        251,
        251
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "y = np.array(values)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "get_trend_analysis",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/regression_detector.py",
      "line_range": [
        254,
        254
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "slope, _intercept = np.polyfit(x, y, 1)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/regression_detector.py",
      "line_range": [
        276,
        276
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "(values[-1] - self.baselines[metric_name])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_save_history",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/optimization/regression_detector.py",
      "line_range": [
        390,
        399
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for metric_name in self.metrics_history:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 10
    },
    {
      "function_name": "_format_as_json",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/data_export.py",
      "line_range": [
        58,
        58
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data[field] = np.round(value, precision).tolist()",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_format_as_csv",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/data_export.py",
      "line_range": [
        82,
        82
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data[field] = np.round(value, precision)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_format_as_csv",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/data_export.py",
      "line_range": [
        92,
        92
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "len(v) if isinstance(v, list | np.ndarray) else 1 for v in data.values()",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "format_calculation_summary",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/data_export.py",
      "line_range": [
        167,
        167
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if isinstance(value, np.ndarray) and len(value) == 1:",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "load_data_file",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/file_operations.py",
      "line_range": [
        39,
        39
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data = np.loadtxt(filename, comments=\"#\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "load_data_file",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/file_operations.py",
      "line_range": [
        43,
        43
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data = np.loadtxt(filename, delimiter=\",\", skiprows=1)  # Skip header",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "load_data_file",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/file_operations.py",
      "line_range": [
        46,
        46
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data = np.loadtxt(filename, comments=\"#\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/io/file_operations.py",
      "line_range": [
        114,
        114
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.savetxt(filename, results, delimiter=\",\", fmt=\"%.6g\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_critical_angle",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/derived_quantities.py",
      "line_range": [
        23,
        23
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "theta_c_rad = np.sqrt(2.0 * dispersion_delta)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_transmission",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/derived_quantities.py",
      "line_range": [
        58,
        58
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.exp(-thickness_cm / attenuation_length_cm)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        134,
        134
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": ">>> energies = np.linspace(8, 12, 5)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        158,
        158
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "for analysis (e.g., np.min(), np.max(), np.argmin(), indexing).",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        200,
        200
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.energy_kev = np.asarray(self.energy_kev)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        201,
        201
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.wavelength_angstrom = np.asarray(self.wavelength_angstrom)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        202,
        202
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.dispersion_delta = np.asarray(self.dispersion_delta)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        203,
        203
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.absorption_beta = np.asarray(self.absorption_beta)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        204,
        204
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.scattering_factor_f1 = np.asarray(self.scattering_factor_f1)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        205,
        205
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.scattering_factor_f2 = np.asarray(self.scattering_factor_f2)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        206,
        206
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.critical_angle_degrees = np.asarray(self.critical_angle_degrees)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        207,
        207
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.attenuation_length_cm = np.asarray(self.attenuation_length_cm)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        208,
        208
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.real_sld_per_ang2 = np.asarray(self.real_sld_per_ang2)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "__post_init__",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        209,
        209
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "self.imaginary_sld_per_ang2 = np.asarray(self.imaginary_sld_per_ang2)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "from_legacy",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        412,
        412
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy if energy is not None else kwargs.get(\"energy_kev\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "from_legacy",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        417,
        417
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"wavelength_angstrom\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "from_legacy",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        422,
        422
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"dispersion_delta\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "from_legacy",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        427,
        427
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"absorption_beta\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "from_legacy",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        432,
        432
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"scattering_factor_f1\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        437,
        437
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"scattering_factor_f2\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        442,
        442
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"critical_angle_degrees\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        447,
        447
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"attenuation_length_cm\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        452,
        452
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"real_sld_per_ang2\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        457,
        457
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "else kwargs.get(\"imaginary_sld_per_ang2\", np.array([]))",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_initialize_element_paths",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        505,
        514
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for base_path in base_paths:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 13
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        589,
        598
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for row in reader:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 18
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        602,
        602
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "data_array = np.array(data_rows, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "get_scattering_factor",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        690,
        690
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.ones_like(q_values)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        931,
        931
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "dispersion = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        932,
        932
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "absorption = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        933,
        933
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        934,
        934
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.zeros(n_energies, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        939,
        939
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "wave_sq = np.square(wavelength)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        949,
        949
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_matrix = np.empty((n_elements, n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        950,
        950
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_matrix = np.empty((n_elements, n_energies), dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        951,
        951
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "counts = np.empty(n_elements, dtype=np.float64, order=\"C\")",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        965,
        965
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_total = np.sum(f1_weighted, axis=0)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        966,
        966
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_total = np.sum(f2_weighted, axis=0)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        984,
        984
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_values = np.asarray(f1_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        986,
        986
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_values = np.asarray(f2_values, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_derived_quantities",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1037,
        1037
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(np.isnan(dispersion)) or np.any(np.isnan(absorption)):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_derived_quantities",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1040,
        1040
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(np.isinf(dispersion)) or np.any(np.isinf(absorption)):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_derived_quantities",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1046,
        1046
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(dispersion < 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1053,
        1053
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.asarray(mass_density).item()",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1054,
        1054
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.asarray(mass_density).size == 1",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1058,
        1058
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.asarray(molecular_weight).item()",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1059,
        1059
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.asarray(molecular_weight).size == 1",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1063,
        1063
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "np.asarray(number_of_electrons).item()",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1064,
        1064
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.asarray(number_of_electrons).size == 1",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1075,
        1075
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "critical_angle = np.sqrt(np.maximum(2.0 * dispersion, 0.0)) * (180.0 / PI)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1080,
        1080
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "absorption_safe = np.maximum(absorption, 1e-30)  # Minimum absorption to prevent inf",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "create_scattering_factor_interpolators",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1128,
        1128
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": ">>> energies = np.array([100.0, 200.0, 300.0])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1164,
        1164
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_values = np.asarray(scattering_factor_data[\"E\"].values)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1165,
        1165
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f1_values = np.asarray(scattering_factor_data[\"f1\"].values)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1166,
        1166
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "f2_values = np.asarray(scattering_factor_data[\"f2\"].values)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1169,
        1169
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if not np.all(energy_values[:-1] <= energy_values[1:]):",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1171,
        1171
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "sort_indices = np.argsort(energy_values)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_single_material_inputs",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1201,
        1201
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(np.asarray(mass_density) <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_single_material_inputs",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1207,
        1207
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energy_kev <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_single_material_inputs",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1210,
        1210
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energy_kev < 0.03) or np.any(energy_kev > 30):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1218,
        1218
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.isscalar(energy_kev):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1220,
        1220
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_kev = np.array([float(energy_kev.real)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1222,
        1222
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_kev = np.array([float(energy_kev)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1225,
        1225
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_kev = np.array([float(energy_kev)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1229,
        1229
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_kev = np.array(energy_kev, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_convert_energy_input",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1231,
        1231
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.asarray(energy_kev)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1559,
        1559
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": ">>> energies = np.linspace(5.0, 15.0, 11)  # 5-15 keV range",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1595,
        1595
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_kev=np.ascontiguousarray(properties[\"energy\"], dtype=np.float64),",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1617,
        1617
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "real_sld_per_ang2=np.ascontiguousarray(properties[\"re_sld\"], dtype=np.float64),",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1653,
        1653
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.isscalar(energies):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1655,
        1655
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array([float(energies.real)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1657,
        1657
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array([float(energies)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1660,
        1660
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array([float(energies)], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1664,
        1664
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energies_array = np.array(energies, dtype=np.float64)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1669,
        1669
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies_array <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_and_process_energies",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1672,
        1672
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies_array < 0.03) or np.any(energies_array > 30):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "process_formula",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1715,
        1715
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if not np.array_equal(sort_indices, np.arange(len(sort_indices))):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "process_formula",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1716,
        1716
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "reverse_indices = np.argsort(sort_indices)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1852,
        1852
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": ">>> energy_range = np.logspace(np.log10(1), np.log10(20), 50)  # 1-20 keV",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1858,
        1867
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": ">>> for formula in materials:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 16
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1861,
        1861
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "...     idx = np.argmin(np.abs(result.energy_kev - 10.0))",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1892,
        1892
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "sort_indices = np.argsort(energies_array)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_optical_constants",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1950,
        1950
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "dispersion = np.asarray(result_dict[\"dispersion\"], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "calculate_optical_constants",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/calculators/core.py",
      "line_range": [
        1951,
        1951
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "absorption = np.asarray(result_dict[\"absorption\"], dtype=np.float64)",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "export_to_csv",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/export/__init__.py",
      "line_range": [
        46,
        55
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for field in fields[1:]:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 23
    },
    {
      "function_name": "validate_energy_range",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        55,
        55
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "energy_array = np.asarray(energies)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "validate_energy_range",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        58,
        58
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(~np.isfinite(energy_array)):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "validate_energy_range",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        64,
        64
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energy_array <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "validate_energy_range",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        71,
        71
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energy_array < min_energy):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "validate_energy_range",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        78,
        78
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energy_array > max_energy):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "validate_density",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/validation/validators.py",
      "line_range": [
        161,
        161
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if not np.isfinite(density):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "parse_energy_string",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        805,
        805
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.array([float(x.strip()) for x in energy_str.split(\",\")])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "parse_energy_string",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        816,
        816
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.logspace(np.log10(start), np.log10(end), count)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "parse_energy_string",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        818,
        818
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.linspace(start, end, count)",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "parse_energy_string",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        821,
        821
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "return np.array([float(energy_str)])",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_format_as_csv",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        879,
        879
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "field: np.round(getattr(result, field), precision) for field in array_fields",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "format_xray_result",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        1166,
        1166
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "if fields != _get_default_fields()[0] + _get_default_fields()[1]:",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_calc_inputs",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        1188,
        1188
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies <= 0):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_validate_calc_inputs",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/cli.py",
      "line_range": [
        1192,
        1192
      ],
      "loop_type": "numpy_usage",
      "estimated_benefit": "low",
      "current_pattern": "if np.any(energies < 0.03) or np.any(energies > 30):",
      "suggested_optimization": "Use NumPy vectorized functions where possible",
      "complexity_score": 1
    },
    {
      "function_name": "_generate_command_definitions",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        269,
        278
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in main_options:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 21
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        311,
        320
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in subcmd_options:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 21
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        336,
        345
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in options:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 21
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        347,
        356
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in global_options:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 16
    },
    {
      "function_name": "_generate_command_completions",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        409,
        418
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in global_options:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 25
    },
    {
      "function_name": "_generate_command_completions",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        435,
        444
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in main_options:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 23
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        463,
        472
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in subcmd_options:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 31
    },
    {
      "function_name": "unknown_function",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/shells.py",
      "line_range": [
        482,
        491
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for option in options:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 23
    },
    {
      "function_name": "clear",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/cache.py",
      "line_range": [
        90,
        99
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for cache_file in self.cache_dir.glob(\"*.json\"):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 18
    },
    {
      "function_name": "get_file_completions",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/cache.py",
      "line_range": [
        239,
        248
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for item in path.glob(pattern):",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 14
    },
    {
      "function_name": "get_stats",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/cache.py",
      "line_range": [
        314,
        314
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "if self.metrics[\"cache_hits\"] + self.metrics[\"cache_misses\"] > 0:",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "get_stats",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/cache.py",
      "line_range": [
        316,
        316
      ],
      "loop_type": "element_wise_ops",
      "estimated_benefit": "high",
      "current_pattern": "self.metrics[\"cache_hits\"] + self.metrics[\"cache_misses\"]",
      "suggested_optimization": "Consider NumPy broadcasting to eliminate element-wise indexing",
      "complexity_score": 1
    },
    {
      "function_name": "_find_environment_by_name",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/installer.py",
      "line_range": [
        210,
        219
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for env in environments:",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 9
    },
    {
      "function_name": "_remove_conda_hooks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/installer.py",
      "line_range": [
        427,
        436
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for script_path in activate_dir.glob(\"xraylabtool-completion.*\"):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 16
    },
    {
      "function_name": "_remove_conda_hooks",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/installer.py",
      "line_range": [
        430,
        439
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for script_path in deactivate_dir.glob(\"xraylabtool-completion.*\"):",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 14
    },
    {
      "function_name": "_uninstall_from_all_environments",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/installer.py",
      "line_range": [
        478,
        487
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for env in environments:",
      "suggested_optimization": "Use NumPy vectorized operations instead of explicit loops",
      "complexity_score": 9
    },
    {
      "function_name": "_get_installed_shells",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/installer.py",
      "line_range": [
        502,
        511
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for shell in self.completion_manager.get_supported_shells():",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 11
    },
    {
      "function_name": "show_completion_info",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/cli.py",
      "line_range": [
        143,
        152
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for shell in manager.get_supported_shells():",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 14
    },
    {
      "function_name": "_discover_poetry_environments",
      "file_path": "/Users/b80985/Projects/pyXRayLabTool/xraylabtool/interfaces/completion_v2/environment.py",
      "line_range": [
        364,
        373
      ],
      "loop_type": "for_loop",
      "estimated_benefit": "medium",
      "current_pattern": "for line in result.stdout.strip().split(\"\\n\"):",
      "suggested_optimization": "Consider NumPy array operations for better performance",
      "complexity_score": 13
    }
  ],
  "recommendations": [
    "Focus optimization on calculate_single_material_properties - consumes 81.5% of total execution time",
    "High-impact vectorization opportunity in _generate_recommendations - Consider NumPy broadcasting to eliminate element-wise indexing"
  ],
  "summary_stats": {
    "total_functions_analyzed": 20,
    "total_memory_bottlenecks": 0,
    "total_vectorization_opportunities": 272,
    "high_impact_vectorization_count": 7,
    "top_function_time_percentage": 81.53492835488503,
    "total_memory_allocation_mb": 0
  }
}
